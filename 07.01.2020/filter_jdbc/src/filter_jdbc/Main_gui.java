package filter_jdbc;

import com.sun.xml.internal.messaging.saaj.soap.JpegDataContentHandler;
import java.sql.*;
import java.util.*;
import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * @author Brigis
 */
public class Main_gui extends javax.swing.JFrame {

    String jdbc_link_text = "", username_text = "", password_text = "",
           Selected_db ="",Selected_table ="",Selected_SearchField ="",
           SearchText = "",ActionText = "";
    Connection conn = null;
    DefaultTableModel model = null;
    int columnsNumber;
    Vector<String> ColnumNames;
    JFrame updateFrame;

    public Main_gui() {
        initComponents();
        dbPanel.setVisible(false);
        TabelPanel.setVisible(false);
        Status.setText("");
        FilterPanel.setVisible(false);
        action_panel.setVisible(false);
    }

    public void displaytable(String query) {
        try {
            model = new DefaultTableModel();
            Statement ColnumStatement = conn.createStatement();
            ResultSet rs = ColnumStatement.executeQuery(query);
            Table.setModel(model);
            ColnumNames = new Vector<>();
            while (rs.next()) {
                model.addColumn(rs.getString(1));
                ColnumNames.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.err.println(ex);
        }
    }

    public void DB_Connect() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(jdbc_link_text, username_text, password_text);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void filter() {
        try {
            SearchList.removeAllItems();
            SearchList.addItem("Select the Column Name");
            Statement SearchStatement = conn.createStatement();
            ResultSet searchRS = SearchStatement.executeQuery("SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` where table_schema = '" + Selected_db + "' and table_name = '" + Selected_table + "';");
            while (searchRS.next()) {
                SearchList.addItem(searchRS.getNString(1));
            }
            if (SearchText.equalsIgnoreCase("")) {
                Status.setText("Missing Condition");
            }
            FilterPanel.setVisible(true);
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    public void insert() {
        FilterPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Main_panel = new javax.swing.JPanel();
        EditorPanel = new javax.swing.JPanel();
        Status = new javax.swing.JLabel();
        Connect_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JdbcTextField = new javax.swing.JTextField();
        UsernameField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        ConnectButton = new javax.swing.JButton();
        dbPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        DBList = new javax.swing.JComboBox<>();
        getTableButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        TableList = new javax.swing.JComboBox<>();
        Display = new javax.swing.JButton();
        TabelPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        FilterPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        SearchList = new javax.swing.JComboBox<>();
        SearchButton = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        action_panel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        action_dropdown = new javax.swing.JComboBox<>();
        ProcessButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        EditorPanel.setLayout(new java.awt.GridBagLayout());

        Status.setForeground(new java.awt.Color(250, 56, 1));
        Status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Status.setText("Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 665;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 31, 0, 0);
        EditorPanel.add(Status, gridBagConstraints);

        jLabel1.setText("JDCB Link");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        JdbcTextField.setText("jdbc:mysql://localhost:3306/?user=root");

        UsernameField.setText("root");

        PasswordField.setText("mobius365");
        PasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordFieldActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Dasebase Name");

        DBList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DBList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBListActionPerformed(evt);
            }
        });

        getTableButton.setText("Get table");
        getTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTableButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Table Name");

        TableList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Display.setText("Display");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbPanelLayout = new javax.swing.GroupLayout(dbPanel);
        dbPanel.setLayout(dbPanelLayout);
        dbPanelLayout.setHorizontalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(getTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DBList, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TableList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        dbPanelLayout.setVerticalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(DBList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(getTableButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TableList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout Connect_panelLayout = new javax.swing.GroupLayout(Connect_panel);
        Connect_panel.setLayout(Connect_panelLayout);
        Connect_panelLayout.setHorizontalGroup(
            Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Connect_panelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(46, 46, 46)
                .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JdbcTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 42, Short.MAX_VALUE))
        );
        Connect_panelLayout.setVerticalGroup(
            Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Connect_panelLayout.createSequentialGroup()
                .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Connect_panelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(JdbcTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(Connect_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(ConnectButton))
                    .addGroup(Connect_panelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(dbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 75, 0, 12);
        EditorPanel.add(Connect_panel, gridBagConstraints);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout TabelPanelLayout = new javax.swing.GroupLayout(TabelPanel);
        TabelPanel.setLayout(TabelPanelLayout);
        TabelPanelLayout.setHorizontalGroup(
            TabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TabelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        TabelPanelLayout.setVerticalGroup(
            TabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel6.setText("Coulumn Name");

        SearchList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        SearchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchFieldMouseEntered(evt);
            }
        });
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FilterPanelLayout = new javax.swing.GroupLayout(FilterPanel);
        FilterPanel.setLayout(FilterPanelLayout);
        FilterPanelLayout.setHorizontalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterPanelLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(SearchList, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        FilterPanelLayout.setVerticalGroup(
            FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addGroup(FilterPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(SearchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setText("Select the Action");

        action_dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        action_dropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                action_dropdownActionPerformed(evt);
            }
        });

        ProcessButton.setText("Process");
        ProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout action_panelLayout = new javax.swing.GroupLayout(action_panel);
        action_panel.setLayout(action_panelLayout);
        action_panelLayout.setHorizontalGroup(
            action_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(action_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(85, 85, 85)
                .addComponent(action_dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(ProcessButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        action_panelLayout.setVerticalGroup(
            action_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, action_panelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(action_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(action_dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(ProcessButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout Main_panelLayout = new javax.swing.GroupLayout(Main_panel);
        Main_panel.setLayout(Main_panelLayout);
        Main_panelLayout.setHorizontalGroup(
            Main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(FilterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TabelPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(action_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Main_panelLayout.setVerticalGroup(
            Main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Main_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(action_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(Main_panel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordFieldActionPerformed

    private void DBListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DBListActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        Display_fn();
        TabelPanel.setVisible(true);
        Status.setText("Displaying data from " + Selected_table);
        action_dropdown.removeAllItems();
        action_dropdown.addItem("Filter");
        action_dropdown.addItem("Insert");
        action_dropdown.addItem("Delete");
        action_dropdown.addItem("Update");
        action_panel.setVisible(true);
    }//GEN-LAST:event_DisplayActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // TODO add your handling code here:
        jdbc_link_text = JdbcTextField.getText();
        username_text = UsernameField.getText();
        password_text = PasswordField.getText();
        try {
            DB_Connect();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(" SHOW DATABASES");
            DBList.removeAllItems();
            DBList.addItem("Select the Database");
            while (rs.next()) {
                DBList.addItem(rs.getNString(1));
            }
            dbPanel.setVisible(true);
            Status.setText("Connected to Dasebase fetching data.......");
        } catch (Exception ex) {
            String error_String = "Access denied for user ";
            String linkErrorSting = "No suitable driver found";
            String ex_message = ex.toString();
            System.out.println(ex_message);
            if (ex_message.contains(error_String)) {
                Status.setText("Invalid User id and Password");
                PasswordField.setText("");
            } else if (ex_message.contains(linkErrorSting)) {
                Status.setText("Incorrect JDBC link");
            }
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void getTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTableButtonActionPerformed
        try {
            Selected_db = DBList.getSelectedItem().toString();
            Statement St = conn.createStatement();
            ResultSet Rs = St.executeQuery(" show tables from " + Selected_db);
            TableList.removeAllItems();
            TableList.addItem("Select the Table");
            while (Rs.next()) {
                TableList.addItem(Rs.getNString(1));
            }
        } catch (SQLException ex) {
            String error_message = ex.toString();
            if (error_message.contains("'Select the Database'")) {
                Status.setText("Select the Database");
            }
        }
    }//GEN-LAST:event_getTableButtonActionPerformed

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void SearchFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchFieldMouseEntered

    }//GEN-LAST:event_SearchFieldMouseEntered

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        try {
            SearchText = SearchField.getText();
            Selected_SearchField = SearchList.getSelectedItem().toString();
            if (SearchText.equalsIgnoreCase("Show All") || SearchText.equalsIgnoreCase("ShoWall")) {
                DisplayActionPerformed(evt);
            } else {
                Statement filterStatement = conn.createStatement();
                ResultSet FilterRs = filterStatement.executeQuery("Select * From " + Selected_db + "." + Selected_table + " where " + Selected_SearchField + "=" + SearchText + ";");
                displaytable("SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` where table_schema = '" + Selected_db + "' and table_name = '" + Selected_table + "';");
                ResultSetMetaData Rsmd = FilterRs.getMetaData();
                columnsNumber = Rsmd.getColumnCount();
                boolean empty = false;
                while (FilterRs.next()) {
                    empty = true;
                    Vector<String> Row_data_fIlter = new Vector<>();
                    for (int i = 1; i <= columnsNumber; i++) {
                        Row_data_fIlter.add(FilterRs.getString(i));
                    }
                    model.addRow(Row_data_fIlter);
                }
                if (empty) {
                    Status.setText("Displaying data after filtering with " + Selected_SearchField + " and value = " + SearchText);
                } else {
                    Status.setText("Data not Found !");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessButtonActionPerformed
        ActionText = action_dropdown.getSelectedItem().toString();
        if (ActionText.equals("Filter"))
        {
            filter();
            Status.setText("Data filtered !");
        } 
        
        else if (ActionText.equals("Insert"))
        
        {
            try
            
            {
                FilterPanel.setVisible(false);
                insert_panel obj = new insert_panel(ColnumNames);
                Vector<String> ValStrings = new Vector<>();
                ValStrings = obj.Values;
                String values = ValStrings.toString().replace("[", "('").replace("]", "')").replace(", ", "','").trim();
                String colnums = ColnumNames.toString().replace("[", "(").replace("]", ")").trim();
                try (Statement insertSt = conn.createStatement()) {
                    String Query = "INSERT INTO " + Selected_db + "." + Selected_table + " " + colnums + " VALUES " + values + ";";
                    //System.out.println(Query);                   
                    insertSt.executeUpdate(Query);
                    Status.setText("Inserting Data done with "+values);
                }
                //System.out.println(Query);
                Display_fn();
                //INSERT INTO `employee`.`emp_table` (`emp_id`, `emp_name`, `emp_email`, `emp_age`) VALUES ('4', 'dfgsbd', 'fgdg', 'dfg');
            } 
            
            catch (SQLException ex) {
                String error =ex.toString(),errorMessage="Column count doesn't match value count"
                        ,errorPRIMARY="for key 'PRIMARY'";
                if (error.contains(errorMessage)){
                    Status.setText("No Input");
                }
                else if(error.contains(errorPRIMARY))
                {
                    Status.setText("ID Present Already Try Some id");
                }
                else{
                    Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } 
        
        else if (ActionText.equals("Delete")) {
            try {
                
                FilterPanel.setVisible(false);
                delete_panel obj = new delete_panel();
                String del = obj.DelString;
                Statement DelStatement = conn.createStatement();
                String DelQurey = "DELETE from " + Selected_db + "." + Selected_table + " where " + ColnumNames.get(0) + " ='" + del + "';";
                //delete from employee.emp_table  where emp_id="43";                
                DelStatement.executeUpdate(DelQurey);
                Status.setText("Row Deleted With  "+ColnumNames.firstElement()+" "+del);
                Display_fn();
            }
            
            catch (SQLException ex) {
                Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        
        else if (ActionText.equals("Update"))
        {
            try {
                FilterPanel.setVisible(false);
                update_panel UpdateObj = new update_panel(ColnumNames);
                String UpdateQuery = "update " + Selected_db + "." + Selected_table
                        + " set " + UpdateObj.UpdateColId + " = '" + UpdateObj.UpdateString
                        + "' where " + ColnumNames.firstElement() + "='" + UpdateObj.Get_Id_String + "';";

                Statement UpdateStatement = conn.createStatement();
                UpdateStatement.executeUpdate(UpdateQuery);
                Status.setText("Row "+UpdateObj.Get_Id_String+" Has been Update ");
                Display_fn();
                

            }
            catch (SQLException ex) {
                String errorString=ex.toString(),errorMessage=" MySQL server version for the right syntax to use";
                if (errorString.contains(errorMessage)){
                    Status.setText("No Input");
                }
                else{
                Logger.getLogger(Main_gui.class.getName()).log(Level.SEVERE, null, ex);            
                }
            }
        }
    }//GEN-LAST:event_ProcessButtonActionPerformed

    private void action_dropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_action_dropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_action_dropdownActionPerformed

    private void TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JPanel Connect_panel;
    private javax.swing.JComboBox<String> DBList;
    public javax.swing.JButton Display;
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JPanel FilterPanel;
    private javax.swing.JTextField JdbcTextField;
    private javax.swing.JPanel Main_panel;
    private javax.swing.JPasswordField PasswordField;
    public static javax.swing.JButton ProcessButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JComboBox<String> SearchList;
    private javax.swing.JLabel Status;
    private javax.swing.JPanel TabelPanel;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox<String> TableList;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JComboBox<String> action_dropdown;
    private javax.swing.JPanel action_panel;
    private javax.swing.JPanel dbPanel;
    private javax.swing.JButton getTableButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void Display_fn() {
        try {
            Selected_table = TableList.getSelectedItem().toString();
            Statement displayStatement = conn.createStatement();
            ResultSet RS = displayStatement.executeQuery("SELECT * FROM " + Selected_db + "." + Selected_table);
            displaytable("SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` where table_schema = '" + Selected_db + "' and table_name = '" + Selected_table + "';");
            ResultSetMetaData rsmd = RS.getMetaData();
            columnsNumber = rsmd.getColumnCount();
            while (RS.next()) {
                Vector<String> Row_data = new Vector<>();
                for (int i = 1; i <= columnsNumber; i++) {
                    Row_data.add(RS.getString(i));
                }
                model.addRow(Row_data);
            }

        } catch (SQLException ex) {
            String Error_message = ex.toString();
            if (Error_message.contains("right syntax to use near 'Table' at line 1") && (Selected_table.equals("Select the Table"))) {
                Status.setText("Select the Table");
            } else {
                System.out.println(ex);
            }
        }
    }
}
